using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using PowerBIReact.Helpers;
using PowerBIReact.Models.DB;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.

builder.Services.AddControllersWithViews();


// SQL Connection
builder.Services.AddDbContext<PowerBiEmbeddedDbContext>(option =>
{
    option.UseSqlServer(builder.Configuration.GetConnectionString("PocConnectionString"));
});

builder.Services.AddIdentity<ApplicationUser, IdentityRole>()
            .AddEntityFrameworkStores<PowerBiEmbeddedDbContext>()
            .AddDefaultTokenProviders();


builder.Services.AddSwaggerGen(c => {
    c.SwaggerDoc("v1", new OpenApiInfo
    {
        Title = "Swagger XML Api for PowerBIPoc",
        Version = "v1",
    });

    //Locate the XML file being generated by ASP.NET...
    //var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.XML";
    //var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);

    ////... and tell Swagger to use those XML comments.
    //c.IncludeXmlComments(xmlPath);

    // To Enable authorization using Swagger (JWT)  

    c.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme()
    {
        Name = "Authorization",
        Type = SecuritySchemeType.ApiKey,
        Scheme = "Bearer",
        BearerFormat = "JWT",
        In = ParameterLocation.Header,
        Description = "JWT Authorization header using the Bearer scheme. \r\n\r\n Enter 'Bearer' [space] and then your token in the text input below.\r\n\r\nExample: \"Bearer 12345abcdef\"",
    });
    c.AddSecurityRequirement(new OpenApiSecurityRequirement
                {
                    {
                          new OpenApiSecurityScheme
                            {
                                Reference = new OpenApiReference
                                {
                                    Type = ReferenceType.SecurityScheme,
                                    Id = "Bearer"
                                }
                            },
                            new string[] {}
                    }
                });
});

// JWT Token 
builder.Services.AddAuthentication(x =>
{
    x.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    x.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
})
.AddJwtBearer(options =>
{
    options.TokenValidationParameters = new TokenValidationParameters
    {
        ValidateIssuer = true,
        ValidateAudience = true,
        ValidateLifetime = true,
        ValidateIssuerSigningKey = true,

        ValidIssuer = builder.Configuration["Jwt:Issuer"],//some string, normally web url,  
        ValidAudience = builder.Configuration["Jwt:Issuer"],
        IssuerSigningKey = new SymmetricSecurityKey(System.Text.Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"])),
    };
});

builder.Services.Configure<EmbedConfiguration>(builder.Configuration.GetSection("EmbedSettings"));

builder.Services.Configure<JWTSettings>(builder.Configuration.GetSection("Jwt"));

var app = builder.Build();

//Seed Data

var scopeFactory = app.Services.GetRequiredService<IServiceScopeFactory>();

using (var scope = scopeFactory.CreateScope())
{
    var userManager = scope.ServiceProvider.GetRequiredService<UserManager<ApplicationUser>>();
    var roleManager = scope.ServiceProvider.GetRequiredService<RoleManager<IdentityRole>>();

    ApplicationDataInitialiser.SeedData(userManager, roleManager);
}

// Configure the HTTP request pipeline.
if (!app.Environment.IsDevelopment())
{
    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();
app.UseRouting();

app.UseAuthentication();
app.UseAuthorization();
app.UseCors("AllowAllHeaders");
app.UseSwagger();
app.UseSwaggerUI();


app.MapControllerRoute(
    name: "default",
    pattern: "{controller}/{action=Index}/{id?}");

app.MapFallbackToFile("index.html"); ;

app.Run();

public static class ApplicationDataInitialiser
{
    public static void SeedData(UserManager<ApplicationUser> userManager, RoleManager<IdentityRole> roleManager)
    {
        SeedRoles(roleManager);
        SeedUsers(userManager);
    }

    public static void SeedUsers(UserManager<ApplicationUser> userManager)
    {
        try
        {
            if (userManager.FindByNameAsync
                           ("Ankesh").Result == null)
            {
                ApplicationUser user = new ApplicationUser();
                user.UserName = "Ankesh";
                user.Email = "Ankesh@gmail.com";
                user.LockoutEnabled = false;
                user.IsActive = true;

                IdentityResult result = userManager.CreateAsync
                    (user, "Ankesh@123").Result;

                if (result.Succeeded)
                {
                    userManager.AddToRoleAsync(user,
                        Roles.Admin.ToString()).Wait();
                }
            }
            if (userManager.FindByNameAsync
                    ("Nitin").Result == null)
            {
                ApplicationUser user = new ApplicationUser();
                user.UserName = "Nitin";
                user.Email = "Nitin12@gmail.com";
                user.LockoutEnabled = false;
                user.IsActive = true;

                IdentityResult result = userManager.CreateAsync
                    (user, "Nitin@123").Result;

                if (result.Succeeded)
                {
                    userManager.AddToRoleAsync(user,
                        Roles.Admin.ToString()).Wait();
                }
            }
            if (userManager.FindByNameAsync
                    ("Aman").Result == null)
            {
                ApplicationUser user = new ApplicationUser();
                user.UserName = "Aman";
                user.Email = "Aman@gmail.com";
                user.LockoutEnabled = false;
                user.IsActive = true;

                IdentityResult result = userManager.CreateAsync
                    (user, "Aman@123").Result;

                if (result.Succeeded)
                {
                    userManager.AddToRoleAsync(user,
                        Roles.Admin.ToString()).Wait();
                }

            }

            if (userManager.FindByNameAsync
                                   ("Sandeep").Result == null)
            {
                ApplicationUser user = new ApplicationUser();
                user.UserName = "Sandeep";
                user.Email = "Sandeep@gmail.com";
                user.LockoutEnabled = false;
                user.IsActive = true;

                IdentityResult result = userManager.CreateAsync
                    (user, "Sandeep@123").Result;

                if (result.Succeeded)
                {
                    userManager.AddToRoleAsync(user,
                        Roles.Admin.ToString()).Wait();
                }
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public static void SeedRoles(RoleManager<IdentityRole> roleManager)
    {
        if (!roleManager.RoleExistsAsync
             (Roles.Admin.ToString()).Result)
        {
            IdentityRole role = new IdentityRole();
            role.Name = Roles.Admin.ToString();
            IdentityResult roleResult = roleManager.
             CreateAsync(role).Result;
        }
    }
}
